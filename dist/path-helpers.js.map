{"version":3,"sources":["path-helpers.js"],"names":["isAbsolute","basePath","getBasePath","process","cwd","replace","directory","existsSync","join","pathAbove","resolve","console","warn","newPath","getPathInPackage","inputFile","getPackageName","getAbsolutePath","relativePath","getAppRelativePath","absolutePath","relative","getPathRelativeToFile","importPath","relativeTo","getModulePath","substring","indexOf","match","convertCurlySyntaxToAbsolutePath","nodeModulesDir","modulePath","mainFile","load","main","accPosition","substr","length"],"mappings":"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","file":"path-helpers.js","sourcesContent":["import cjson from 'cjson';\r\nimport path from 'path';\r\nimport pathIsAbsolute from 'path-is-absolute';\r\nimport fs from 'fs';\r\n\r\nif (!path.isAbsolute) path.isAbsolute = pathIsAbsolute;\r\n\r\nlet basePath = getBasePath(process.cwd().replace(/\\\\/g, '/'));\r\n\r\nfunction getBasePath(directory) {\r\n  if (fs.existsSync(path.join(directory, '.meteor'))) {\r\n    return directory;\r\n  }\r\n  const pathAbove = path.resolve(directory, '..');\r\n  if (pathAbove === directory) {\r\n    console.warn('No .meteor directory found in the path tree; PathHelpers.basePath must be set manually.');\r\n    return null;\r\n  }\r\n  return getBasePath(pathAbove);\r\n}\r\n\r\nexport default {\r\n  get basePath() {\r\n    return basePath;\r\n  },\r\n\r\n  set basePath(newPath) {\r\n    basePath = newPath;\r\n  },\r\n\r\n  getPathInPackage(inputFile) {\r\n    if (inputFile.getPackageName() === null) {\r\n      return path.join(basePath, inputFile.getPathInPackage()).replace(/\\\\/g, '/');\r\n    }\r\n    return path.join(basePath, 'packages', inputFile.getPackageName().replace(':', '_'), inputFile.getPathInPackage()).replace(/\\\\/g, '/');\r\n  },\r\n\r\n  getAbsolutePath(relativePath) {\r\n    if (path.isAbsolute(relativePath)) {\r\n      return relativePath.replace(/\\\\/g, '/');\r\n    }\r\n\r\n    return path.join(basePath, relativePath).replace(/\\\\/g, '/');\r\n  },\r\n\r\n  getAppRelativePath(absolutePath) {\r\n    return '/' + path.relative(basePath, absolutePath).replace(/\\\\/g, '/');\r\n  },\r\n\r\n  getPathRelativeToFile(importPath, relativeTo) {\r\n    importPath = importPath.replace(/^[\"']|[\"']$/g, '');\r\n    var relativePath = relativeTo.replace(/(.*)\\/.*/, '$1');\r\n    if (importPath[0] === '~') {\r\n      return getModulePath(importPath.substring(1));\r\n    }\r\n\r\n    // Fix relative paths that don't start with ./\r\n    if (['.', '/', '~', '{'].indexOf(importPath[0]) === -1 && !importPath.match(/^[A-Za-z]:/)) {\r\n      importPath = './' + importPath;\r\n    }\r\n\r\n    if (importPath[0] === '.') {\r\n      importPath = path.join(relativePath, importPath);\r\n    }\r\n\r\n    importPath = convertCurlySyntaxToAbsolutePath(importPath);\r\n\r\n    return importPath.replace(/\\\\/g, '/');\r\n\r\n    function getModulePath(importPath) {\r\n      const nodeModulesDir = `${basePath}/node_modules`;\r\n      if (importPath.match(/\\//)) {\r\n        return `${nodeModulesDir}/${importPath}`;\r\n      }\r\n\r\n      const modulePath = `${nodeModulesDir}/${importPath}`;\r\n      const mainFile = cjson.load(`${modulePath}/package.json`).main;\r\n      return `${modulePath}/${mainFile}`;\r\n    }\r\n\r\n    function convertCurlySyntaxToAbsolutePath(importPath) {\r\n      let accPosition = importPath.indexOf('{');\r\n      if (accPosition === -1) {\r\n        return importPath;\r\n      }\r\n\r\n      importPath = importPath.substr(accPosition, importPath.length);\r\n      if (importPath.indexOf('{}') === 0) {\r\n        return path.join(basePath, importPath.substring(2));\r\n      }\r\n\r\n      return path.join(basePath, 'packages/' + importPath.replace(/\\{(.*?):(.*?)}/, '$1_$2').replace(/\\{(.*?)}/, '$1'));\r\n    }\r\n  }\r\n};\r\n"]}